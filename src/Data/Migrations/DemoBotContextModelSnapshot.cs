// <auto-generated />
using System;
using DemoBot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DemoBot.Data.Migrations
{
    [DbContext(typeof(DemoBotContext))]
    partial class DemoBotContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0-rc.2.21480.5");

            modelBuilder.Entity("Zs.Bot.Data.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChatTypeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RawDataHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RawDataHistory")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("ChatTypeId");

                    b.ToTable("Chats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ChatTypeId = "PRIVATE",
                            Description = "IntegrationTestChat",
                            InsertDate = new DateTime(2021, 10, 25, 14, 55, 4, 361, DateTimeKind.Utc).AddTicks(9681),
                            Name = "IntegrationTestChat",
                            RawData = "{ \"test\": \"test\" }",
                            RawDataHash = "-1063294487",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1,
                            ChatTypeId = "PRIVATE",
                            InsertDate = new DateTime(2021, 10, 25, 14, 55, 4, 361, DateTimeKind.Utc).AddTicks(9683),
                            Name = "zuev56",
                            RawData = "{ \"Id\": 210281448 }",
                            RawDataHash = "-1063294487",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.ChatType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ChatTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "CHANNEL",
                            Name = "Channel"
                        },
                        new
                        {
                            Id = "GROUP",
                            Name = "Group"
                        },
                        new
                        {
                            Id = "PRIVATE",
                            Name = "Private"
                        },
                        new
                        {
                            Id = "UNDEFINED",
                            Name = "Undefined"
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.Command", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultArgs")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Commands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "/test",
                            Description = "Тестовый запрос к боту. Возвращает ''Test''",
                            Group = "moderatorCmdGroup",
                            Script = "SELECT 'Test'"
                        },
                        new
                        {
                            Id = "/nulltest",
                            Description = "Тестовый запрос к боту. Возвращает NULL",
                            Group = "moderatorCmdGroup",
                            Script = "SELECT null"
                        },
                        new
                        {
                            Id = "/help",
                            DefaultArgs = "<UserRoleId>",
                            Description = "Получение справки по доступным функциям",
                            Group = "userCmdGroup",
                            Script = "SELECT 'Not implemented for SQLite :('"
                        },
                        new
                        {
                            Id = "/sqlquery",
                            DefaultArgs = "select 'Pass your query as a parameter in double quotes'",
                            Description = "SQL-запрос",
                            Group = "adminCmdGroup",
                            Script = "SELECT 'Not implemented for SQLite :('"
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FailDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("FailsCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSucceed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MessageTypeId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("MessengerId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RawDataHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RawDataHistory")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReplyToMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("MessageTypeId");

                    b.HasIndex("MessengerId");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.MessageType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MessageTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "UKN",
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = "TXT",
                            Name = "Text"
                        },
                        new
                        {
                            Id = "PHT",
                            Name = "Photo"
                        },
                        new
                        {
                            Id = "AUD",
                            Name = "Audio"
                        },
                        new
                        {
                            Id = "VID",
                            Name = "Video"
                        },
                        new
                        {
                            Id = "VOI",
                            Name = "Voice"
                        },
                        new
                        {
                            Id = "DOC",
                            Name = "Document"
                        },
                        new
                        {
                            Id = "STK",
                            Name = "Sticker"
                        },
                        new
                        {
                            Id = "LOC",
                            Name = "Location"
                        },
                        new
                        {
                            Id = "CNT",
                            Name = "Contact"
                        },
                        new
                        {
                            Id = "SRV",
                            Name = "Service message"
                        },
                        new
                        {
                            Id = "OTH",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.MessengerInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MessengerInfos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "TG",
                            Name = "Telegram"
                        },
                        new
                        {
                            Id = "VK",
                            Name = "Вконтакте"
                        },
                        new
                        {
                            Id = "SK",
                            Name = "Skype"
                        },
                        new
                        {
                            Id = "FB",
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = "DC",
                            Name = "Discord"
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("IsBot")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RawDataHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RawDataHistory")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UserRoleId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -10,
                            FullName = "for exported message reading",
                            InsertDate = new DateTime(2021, 10, 25, 14, 55, 4, 361, DateTimeKind.Utc).AddTicks(9714),
                            IsBot = false,
                            Name = "Unknown",
                            RawData = "{ \"test\": \"test\" }",
                            RawDataHash = "-1063294487",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserRoleId = "USER"
                        },
                        new
                        {
                            Id = -1,
                            FullName = "IntegrationTest",
                            InsertDate = new DateTime(2021, 10, 25, 14, 55, 4, 361, DateTimeKind.Utc).AddTicks(9716),
                            IsBot = false,
                            Name = "IntegrationTestUser",
                            RawData = "{ \"test\": \"test\" }",
                            RawDataHash = "-1063294487",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserRoleId = "USER"
                        },
                        new
                        {
                            Id = 1,
                            FullName = "Сергей Зуев",
                            InsertDate = new DateTime(2021, 10, 25, 14, 55, 4, 361, DateTimeKind.Utc).AddTicks(9717),
                            IsBot = false,
                            Name = "zuev56",
                            RawData = "{ \"Id\": 210281448 }",
                            RawDataHash = "-1063294487",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserRoleId = "OWNER"
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "OWNER",
                            Name = "Owner",
                            Permissions = "[ \"All\" ]"
                        },
                        new
                        {
                            Id = "ADMIN",
                            Name = "Administrator",
                            Permissions = "[ \"adminCmdGroup\", \"moderatorCmdGroup\", \"userCmdGroup\" ]"
                        },
                        new
                        {
                            Id = "MODERATOR",
                            Name = "Moderator",
                            Permissions = "[ \"moderatorCmdGroup\", \"userCmdGroup\" ]"
                        },
                        new
                        {
                            Id = "USER",
                            Name = "User",
                            Permissions = "[ \"userCmdGroup\" ]"
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.Chat", b =>
                {
                    b.HasOne("Zs.Bot.Data.Models.ChatType", "ChatType")
                        .WithMany("Chats")
                        .HasForeignKey("ChatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatType");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.Message", b =>
                {
                    b.HasOne("Zs.Bot.Data.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zs.Bot.Data.Models.MessageType", "MessageType")
                        .WithMany("Messages")
                        .HasForeignKey("MessageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zs.Bot.Data.Models.MessengerInfo", "Messenger")
                        .WithMany("Messages")
                        .HasForeignKey("MessengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zs.Bot.Data.Models.Message", "ReplyToMessage")
                        .WithMany()
                        .HasForeignKey("ReplyToMessageId");

                    b.HasOne("Zs.Bot.Data.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("MessageType");

                    b.Navigation("Messenger");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.User", b =>
                {
                    b.HasOne("Zs.Bot.Data.Models.UserRole", "UserRoles")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.ChatType", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.MessageType", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.MessengerInfo", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.User", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
